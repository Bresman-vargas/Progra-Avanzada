package vista;

import ExportarTxt.ExportarTxt;
import com.formdev.flatlaf.FlatLightLaf;
import com.formdev.flatlaf.IntelliJTheme;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import logica.Controladora;
import logica.Servicio;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableRowSorter;
import logica.Beneficiario;
import logica.Asignacion;

public class MenuServicios extends javax.swing.JFrame {
    private static final Color ACCENT_COLOR_LIGHT = new Color(50, 35, 62);
    private static final Color ACCENT_COLOR_BLACK = new Color(255,216,102);
    private static final Color FOREGROUND_COLOR_LIGHT = Color.WHITE;
    private static final Color FOREGROUND_COLOR_BLACK = new Color(34,31,34);
    Controladora control;
    Beneficiario beneficiario;
    Servicio servicio;
    /**
     * Creates new form MenuServicios
     */
    public MenuServicios() {
        initComponents();
        setResizable(false);
        
        try {
            control = new Controladora(); // Inicializar Controladora
            cargarTabla();
            cargarTablaBeneficiario();
            cargarTablaServicios();
            cargarRelacionesEnTabla(); // Cargar tabla solo si Controladora se inicializa correctamente
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                "Error al inicializar la controladora: " + e.getMessage(),
                "Error de Inicialización",
                JOptionPane.ERROR_MESSAGE);
        }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        irAtrasBen = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        txtServicio = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDetallesServicio = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        btnGuardar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnEliminar = new javax.swing.JButton();
        txtResponsable = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaServicios = new javax.swing.JTable();
        btnEditar = new javax.swing.JButton();
        buscarTxt = new javax.swing.JTextField();
        btnLimpiar = new javax.swing.JButton();
        reporteExel1 = new javax.swing.JButton();
        importarTxt = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaBenAsig = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablaServiciosAsig = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        txtAsigSer = new javax.swing.JTextField();
        btnLimpiarAsig = new javax.swing.JButton();
        buscarSer = new javax.swing.JTextField();
        buscarBen = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btnAgregarAsig = new javax.swing.JButton();
        txtAsigBen = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaAsig = new javax.swing.JTable();
        btnBorrarAsig = new javax.swing.JButton();
        BuscarAsig = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        reporteExel = new javax.swing.JButton();
        btnTheme = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Menú Servicios");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        irAtrasBen.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        irAtrasBen.setText("<< Atrás");
        irAtrasBen.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        irAtrasBen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                irAtrasBenMouseClicked(evt);
            }
        });
        jPanel1.add(irAtrasBen, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 120, 30));

        jPanel2.setBackground(UIManager.getColor("Component.accentColor"));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1130, 10));

        jLabel2.setFont(new java.awt.Font("Bungee", 0, 15)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("ACTIVA");
        jLabel2.setOpaque(true);
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 40, 90, 20));

        jLabel1.setBackground(UIManager.getColor("Component.accentColor"));
        jLabel1.setFont(new java.awt.Font("Bungee", 0, 15)); // NOI18N
        jLabel1.setForeground(UIManager.getColor("Component.foreground"));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("INCLUSIÓN");
        jLabel1.setOpaque(true);
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 40, 160, 20));

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtServicio.setDisabledTextColor(new java.awt.Color(255, 51, 51));
        jPanel3.add(txtServicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 340, 40));

        txtDetallesServicio.setColumns(20);
        txtDetallesServicio.setRows(5);
        txtDetallesServicio.setBorder(null);
        txtDetallesServicio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDetallesServicioKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(txtDetallesServicio);

        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 50, 360, 110));

        jLabel6.setText("Buscar:");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 180, 50, 25));

        btnGuardar.setBackground(UIManager.getColor("Component.accentColor"));
        btnGuardar.setForeground(UIManager.getColor("Component.foreground"));
        btnGuardar.setText("Guardar");
        btnGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGuardar.setFocusable(false);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        jPanel3.add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 120, 260, 40));

        jLabel5.setText("Detalles Servicio:");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 20, 130, -1));

        jLabel4.setText("Responsable Servicio:");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 20, -1, 20));

        btnEliminar.setText("Eliminar");
        btnEliminar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEliminar.setFocusable(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        jPanel3.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 120, 90, 40));
        jPanel3.add(txtResponsable, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 50, 260, 40));

        jLabel3.setText("Nombre Servicio:");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, -1));

        tablaServicios.setFont(new java.awt.Font("Lato", 0, 12)); // NOI18N
        tablaServicios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tablaServicios.setFillsViewportHeight(true);
        tablaServicios.setFocusable(false);
        tablaServicios.setRowHeight(25);
        tablaServicios.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaServicios.setShowGrid(true);
        jScrollPane2.setViewportView(tablaServicios);

        jPanel3.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, 980, 340));

        btnEditar.setText("Editar");
        btnEditar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEditar.setFocusable(false);
        btnEditar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEditarMouseClicked(evt);
            }
        });
        jPanel3.add(btnEditar, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 120, 140, 40));
        jPanel3.add(buscarTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 180, 300, -1));

        btnLimpiar.setText("Limpiar");
        btnLimpiar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLimpiar.setFocusable(false);
        jPanel3.add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 90, 40));

        reporteExel1.setText("Exportar");
        reporteExel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reporteExel1ActionPerformed(evt);
            }
        });
        jPanel3.add(reporteExel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 180, 140, -1));

        importarTxt.setText("Importar");
        importarTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importarTxtActionPerformed(evt);
            }
        });
        jPanel3.add(importarTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 180, 140, -1));

        jTabbedPane1.addTab("Añadir Nuevo Servicio", jPanel3);

        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablaBenAsig.setFont(new java.awt.Font("Lato", 0, 12)); // NOI18N
        tablaBenAsig.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tablaBenAsig.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tablaBenAsig.setFillsViewportHeight(true);
        tablaBenAsig.setFocusable(false);
        tablaBenAsig.setRequestFocusEnabled(false);
        tablaBenAsig.setRowHeight(25);
        tablaBenAsig.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaBenAsig.setShowGrid(false);
        tablaBenAsig.setShowHorizontalLines(true);
        tablaBenAsig.setShowVerticalLines(true);
        jScrollPane3.setViewportView(tablaBenAsig);

        jPanel4.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, 490, 400));

        tablaServiciosAsig.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tablaServiciosAsig.setFillsViewportHeight(true);
        tablaServiciosAsig.setFocusable(false);
        tablaServiciosAsig.setRowHeight(25);
        tablaServiciosAsig.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaServiciosAsig.setShowHorizontalLines(true);
        tablaServiciosAsig.setShowVerticalLines(true);
        jScrollPane5.setViewportView(tablaServiciosAsig);

        jPanel4.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 150, -1, 400));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel4.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 150, 10, 400));

        txtAsigSer.setEditable(false);
        txtAsigSer.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        jPanel4.add(txtAsigSer, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 50, 300, 40));

        btnLimpiarAsig.setText("Limpiar");
        btnLimpiarAsig.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnLimpiarAsigMousePressed(evt);
            }
        });
        jPanel4.add(btnLimpiarAsig, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 50, 100, 40));
        jPanel4.add(buscarSer, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 110, 300, -1));
        jPanel4.add(buscarBen, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 110, 300, -1));

        jLabel7.setText("Nombre Servicio");
        jPanel4.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 20, 170, -1));

        jLabel8.setText("Nombre Beneficiario");
        jPanel4.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 160, -1));

        jLabel9.setText("Buscar");
        jPanel4.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 110, 50, 20));

        jLabel10.setText("Buscar");
        jPanel4.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 110, 50, 20));

        btnAgregarAsig.setBackground(UIManager.getColor("Component.accentColor"));
        btnAgregarAsig.setForeground(UIManager.getColor("Component.foreground"));
        btnAgregarAsig.setText("Relacionar");
        btnAgregarAsig.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAgregarAsigMouseClicked(evt);
            }
        });
        jPanel4.add(btnAgregarAsig, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 50, 220, 40));

        txtAsigBen.setEditable(false);
        txtAsigBen.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        jPanel4.add(txtAsigBen, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 300, 40));

        jTabbedPane1.addTab("Asignar Servicio a Beneficiario", jPanel4);

        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablaAsig.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tablaAsig.setRowHeight(25);
        tablaAsig.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaAsig.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaAsig.setShowHorizontalLines(true);
        tablaAsig.setShowVerticalLines(true);
        jScrollPane4.setViewportView(tablaAsig);

        jPanel5.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, 990, 400));

        btnBorrarAsig.setBackground(UIManager.getColor("Component.accentColor"));
        btnBorrarAsig.setForeground(UIManager.getColor("Component.foreground"));
        btnBorrarAsig.setText("Borrar");
        btnBorrarAsig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarAsigActionPerformed(evt);
            }
        });
        jPanel5.add(btnBorrarAsig, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 50, 210, 40));
        jPanel5.add(BuscarAsig, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 110, 290, -1));

        jLabel11.setText("Buscar");
        jPanel5.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 110, 51, 20));

        reporteExel.setText("Exportar");
        reporteExel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reporteExelActionPerformed(evt);
            }
        });
        jPanel5.add(reporteExel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 160, -1));

        jTabbedPane1.addTab("Servicios Asignados", jPanel5);

        jPanel1.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 90, 1050, 610));

        btnTheme.setText("Theme");
        btnTheme.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTheme.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnThemeMousePressed(evt);
            }
        });
        jPanel1.add(btnTheme, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 40, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            txtServicio.requestFocusInWindow();
            cargarTabla(); // Cargar tabla de servicios
            cargarTablaBeneficiario(); // Cargar tabla de beneficiarios
            cargarTablaServicios(); // Cargar tabla de servicios
            cargarRelacionesEnTabla(); // Cargar relaciones en tabla
        } catch (Exception e) {
            // Manejar cualquier excepción que pueda surgir al cargar las tablas
            JOptionPane.showMessageDialog(this, "Error al cargar datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_formWindowOpened

    private void irAtrasBenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_irAtrasBenMouseClicked

        // Crear y mostrar la nueva ventana
        Principal pantalla = new Principal();
        pantalla.setLocationRelativeTo(null);
        pantalla.setVisible(true);

        this.dispose();
    }//GEN-LAST:event_irAtrasBenMouseClicked
    
    private boolean enModoEdicion = false;
    private int filaSeleccionada = -1;  
    
    private void btnEditarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditarMouseClicked
        if (!enModoEdicion) {
            // Obtener el índice de la fila seleccionada
            filaSeleccionada = tablaServicios.getSelectedRow();

            // Verificar si hay una fila seleccionada
            if (filaSeleccionada != -1) {
                long num_Servicio = Long.parseLong(String.valueOf(tablaServicios.getValueAt(filaSeleccionada, 0)));

                this.servicio = control.traerServicio(num_Servicio);

                txtServicio.setText(servicio.getNombre());
                txtResponsable.setText(servicio.getResponsable());
                txtDetallesServicio.setText(servicio.getDescripcion());

                // Cambiar el texto del botón a "Guardar Cambios"
                btnEditar.setText("Guardar Cambios");

                // Deshabilitar los botones "Eliminar" y "Agregar"
                btnEliminar.setEnabled(false);
                btnGuardar.setEnabled(false);

                // Entrar en modo edición
                enModoEdicion = true;
            } else {
                // Mostrar un mensaje si no hay ninguna fila seleccionada
                mostrarMensaje("No se ha seleccionado ninguna fila. Por favor, seleccione una fila para editar.", "Error", "Error");
            }
        } else {
            // Si estamos en modo edición, validar y guardar los cambios
            if (filaSeleccionada != -1) {
                // Obtener los valores de los campos de texto
                String servicioNombre = txtServicio.getText().trim();
                String responsable = txtResponsable.getText().trim();
                String detalles = txtDetallesServicio.getText().trim();

                // Verificar si los campos obligatorios están vacíos
                if (servicioNombre.isEmpty() || responsable.isEmpty() || detalles.isEmpty()) {
                    mostrarMensaje("Todos los campos deben ser completos.", "Error de Entrada", "Error");

                    return; // Salir del método para evitar acciones posteriores
                }

                try {
                    control.modificarServicio(servicio, servicioNombre, responsable, detalles);
                } catch (Exception ex) {
                    Logger.getLogger(MenuServicios.class.getName()).log(Level.SEVERE, null, ex);
                }

                cargarTabla();
                cargarTablaBeneficiario();
                cargarTablaServicios();
                cargarRelacionesEnTabla();

                // Mostrar un mensaje de éxito
                mostrarMensaje("Registro actualizado con éxito.", "Éxito", "Información");


                // Limpiar los campos de texto después de guardar los cambios
                txtServicio.setText("");
                txtResponsable.setText("");
                txtDetallesServicio.setText("");

                // Cambiar el texto del botón de nuevo a "Editar"
                btnEditar.setText("Editar");

                // Salir del modo edición
                enModoEdicion = false;

                // Reactivar los botones "Eliminar" y "Agregar"
                btnEliminar.setEnabled(true);
                btnGuardar.setEnabled(true);

                // Limpiar la selección de la tabla
                tablaServicios.clearSelection();
            }
        }
    }//GEN-LAST:event_btnEditarMouseClicked

    
    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // Obtener el índice de la fila seleccionada
        int filaSeleccionadaServicio = tablaServicios.getSelectedRow();

        if (filaSeleccionadaServicio != -1) {
            int filaSeleccionadaModelo = tablaServicios.convertRowIndexToModel(filaSeleccionadaServicio);
            int confirmacion = JOptionPane.showConfirmDialog(this, "¿Estás seguro de que deseas eliminar este servicio?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            if (confirmacion == JOptionPane.YES_OPTION) {
                try {
                    // Obtener el ID del servicio seleccionado
                    long num_Servicio = Long.parseLong(String.valueOf(tablaServicios.getValueAt(filaSeleccionadaModelo, 0)));

                    // Verificar si existen asignaciones relacionadas con el servicio
                    List<Asignacion> asignacionesRelacionadas = control.obtenerAsignacionesPorServicio(num_Servicio);

                    if (asignacionesRelacionadas.isEmpty()) {
                        // No hay asignaciones, proceder con la eliminación
                        control.borrarServicio(num_Servicio);
                        cargarTabla();
                        cargarTablaBeneficiario();
                        cargarTablaServicios();
                        mostrarMensaje("Servicio eliminado exitosamente.", "Info", "Éxito");
                    } else {
                        // Existen asignaciones activas, no se puede eliminar el servicio
                        mostrarMensaje("No se puede eliminar este servicio porque tiene asignaciones activas.", "Error", "Error");
                    }

                } catch (Exception e) {
                    mostrarMensaje("Ocurrió un error al eliminar el servicio: " + e.getMessage(), "Error", "Error");
                    e.printStackTrace();
                }
            } else {
                mostrarMensaje("Eliminación cancelada.", "Info", "Cancelación");
            }
            tablaServicios.clearSelection();
        } else {
            mostrarMensaje("No se ha seleccionado ninguna fila.", "Error", "Error");
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        try {
            // Obtener los valores de los campos de texto
            String servicio = this.txtServicio.getText().trim();
            String responsable = this.txtResponsable.getText().trim();
            String detalles_servicio= this.txtDetallesServicio.getText().trim();

            // Verificar si los campos obligatorios están vacíos
            if (servicio.isEmpty() || responsable.isEmpty()|| detalles_servicio.isEmpty()) {
                mostrarMensaje("Todos los campos deben ser completos.", "Error", "Error de Entrada");
                txtServicio.requestFocusInWindow();
                return;
            }

            // Llamar al método del controlador para agregar el beneficiario
            control.agregarServicio(servicio, responsable, detalles_servicio);

            // Limpiar campos
            txtServicio.setText("");
            txtResponsable.setText("");
            txtDetallesServicio.setText("");

            // Establecer el enfoque en el primer campo
            txtServicio.requestFocusInWindow();

            // Actualizar la tabla
            cargarTabla();
            cargarTablaBeneficiario();
            cargarTablaServicios();
            cargarRelacionesEnTabla();

        } catch (Exception e) {
            mostrarMensaje("Ocurrió un error inesperado: " + e.getMessage(), "Error", "Error");
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void txtDetallesServicioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDetallesServicioKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_TAB) {
            evt.consume(); // Evitar el cambio de foco
            btnGuardar.doClick();  // Simular clic en el botón
        }
    }//GEN-LAST:event_txtDetallesServicioKeyPressed

    private void btnThemeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnThemeMousePressed
        try {
        // Verificar el Look and Feel actual y cambiar de tema
        if (UIManager.getLookAndFeel().getClass().getName().equals("com.formdev.flatlaf.FlatLightLaf")) {
            // Cambiar al tema IntelliJ
            IntelliJTheme.setup(Principal.class.getResourceAsStream("/default.theme.json"));
            UIManager.put("Component.accentColor", ACCENT_COLOR_BLACK);
            UIManager.put("Component.foreground", FOREGROUND_COLOR_BLACK);
        } else {
            // Volver a FlatLightLaf
            FlatLightLaf.setup();
            UIManager.put("Component.accentColor", ACCENT_COLOR_LIGHT);
            UIManager.put("Component.foreground", FOREGROUND_COLOR_LIGHT);
        }

        // Actualizar la UI
        SwingUtilities.updateComponentTreeUI(this);

        // Navegar a la nueva pantalla
        MenuServicios pantalla = new MenuServicios();
        pantalla.setLocationRelativeTo(null);
        pantalla.setVisible(true);
        
        // Cerrar la pantalla actual
        this.dispose();

    } catch (Exception e) {
        e.printStackTrace();
        // Aquí podrías mostrar un mensaje al usuario si ocurre un error
    }
    }//GEN-LAST:event_btnThemeMousePressed

    private int filaSeleccionadaBen = -1;
    private int filaSeleccionadaSer = -1;
    
    private void btnAgregarAsigMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAgregarAsigMouseClicked
        // TODO add your handling code here:
    filaSeleccionadaBen = tablaBenAsig.getSelectedRow();
    filaSeleccionadaSer = tablaServiciosAsig.getSelectedRow();

    if (filaSeleccionadaBen != -1 && filaSeleccionadaSer != -1) {
        long num_Beneficiario = Long.parseLong(String.valueOf(tablaBenAsig.getValueAt(filaSeleccionadaBen, 0)));
        long num_Servicio = Long.parseLong(String.valueOf(tablaServiciosAsig.getValueAt(filaSeleccionadaSer, 0)));

        // Obtener los objetos Beneficiario y Servicio a partir de los IDs
        this.beneficiario = control.traerBeneficiario(num_Beneficiario);
        this.servicio = control.traerServicio(num_Servicio);

        // Actualizar los campos de texto en la interfaz
        txtAsigBen.setText(beneficiario.getNombre());
        txtAsigSer.setText(servicio.getNombre());
        
        String asigBen = txtAsigBen.getText().trim();
        String asigSer = txtAsigSer.getText().trim();

        // Verificar si alguno de los campos está vacío
        if (asigBen.isEmpty() || asigSer.isEmpty()) {
            // Mostrar un mensaje de error utilizando el método mostrarMensaje
            mostrarMensaje("Error: Falta completar uno o más campos.", "Error", "Campos vacíos");
        } else {
            // Mostrar mensaje de confirmación antes de agregar
            
            int respuesta = JOptionPane.showConfirmDialog(
                null, 
                "¿Está seguro de que desea asignar el beneficiario " + asigBen + " al servicio " + asigSer + "?", 
                "Confirmar asignación", 
                JOptionPane.YES_NO_OPTION
            );

            // Si el usuario confirma (presiona Sí), realizar la asignación
            if (respuesta == JOptionPane.YES_OPTION) {
                // Crear una nueva instancia de Asignacion
                Asignacion nuevaAsignacion = new Asignacion();
                nuevaAsignacion.setBeneficiario(beneficiario); // Establecer el beneficiario

                if (servicio != null) {
                    // Crear un nuevo mapa para los servicios
                    Map<Long, Servicio> serviciosMap = new HashMap<>();
                    serviciosMap.put(servicio.getId(), servicio); // Agregar el servicio al mapa con su ID como clave

                    nuevaAsignacion.setServicios(serviciosMap); // Establecer el mapa de servicios

                    try {
                        control.agregarAsignacion(nuevaAsignacion); // Crear la asignación en la base de datos
                        cargarRelacionesEnTabla();
                    } catch (Exception e) {
                        mostrarMensaje("Ocurrió un error al asignar el beneficiario: " + e.getMessage(), "Error", "Error");
                    }

                    mostrarMensaje("Beneficiario " + asigBen + " asignado al servicio " + asigSer, "Info", "Asignación Exitosa");
                } else {
                    mostrarMensaje("El servicio seleccionado es nulo, por favor verifique.", "Error", "Error");
                }
            }
        }
    } else {
        // Mostrar un mensaje si no se seleccionó ninguna fila
        mostrarMensaje("Seleccione un beneficiario y un servicio.", "Error", "Error");
        }
    }//GEN-LAST:event_btnAgregarAsigMouseClicked

    private void btnLimpiarAsigMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLimpiarAsigMousePressed
        // TODO add your handling code here:
        txtAsigBen.setText("");
        txtAsigSer.setText("");
        buscarBen.setText("");
        buscarSer.setText("");      
    }//GEN-LAST:event_btnLimpiarAsigMousePressed


    private void btnBorrarAsigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarAsigActionPerformed
        int filaSeleccionadaAsig = tablaAsig.getSelectedRow();

        if (filaSeleccionadaAsig != -1) {
            // Convertir el índice de la vista al índice del modelo
            int filaSeleccionadaModelo = tablaAsig.convertRowIndexToModel(filaSeleccionadaAsig);

            int confirmacion = JOptionPane.showConfirmDialog(this, "¿Estás seguro de que deseas eliminar esta asignación?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            if (confirmacion == JOptionPane.YES_OPTION) {
                try {
                    // Obtener el ID del asignacion desde el modelo de la tabla
                    long num_Assig = Long.parseLong(String.valueOf(tablaAsig.getModel().getValueAt(filaSeleccionadaModelo, 0)));

                    // Llamar al método para eliminar la asignacion
                    control.borrarAsig(num_Assig); 

                    // Recargar la tabla después de la eliminación
                    cargarRelacionesEnTabla();

                    mostrarMensaje("Asignación eliminada exitosamente.", "Info", "Éxito");
                } catch (Exception e) {
                    mostrarMensaje("Ocurrió un error al eliminar la asignación: " + e.getMessage(), "Error", "Error");
                    e.printStackTrace();
                }
            } else {
                mostrarMensaje("Eliminación cancelada.", "Info", "Cancelación");
            }

            // Limpiar la selección de la tabla
            tablaAsig.clearSelection();
        } else {
            mostrarMensaje("No se ha seleccionado ninguna fila.", "Error", "Error");
        }
    }//GEN-LAST:event_btnBorrarAsigActionPerformed

    private void reporteExelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reporteExelActionPerformed
        ExportarTxt obj;

        try {
            obj = new ExportarTxt();
            obj.exportarTxt(tablaAsig);  
        } catch (IOException ex) {
            System.out.println("Error: " + ex);  
        }
    }//GEN-LAST:event_reporteExelActionPerformed

    private void reporteExel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reporteExel1ActionPerformed
        ExportarTxt obj;

        try {
            obj = new ExportarTxt();
            obj.exportarTxt(tablaServicios);  
        } catch (IOException ex) {
            System.out.println("Error: " + ex);  
        }
    }//GEN-LAST:event_reporteExel1ActionPerformed

    private void importarTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importarTxtActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos de texto (*.txt)", "txt"));

        int returnValue = fileChooser.showOpenDialog(this);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            try {
                importarServiciosDesdeArchivo(selectedFile.getAbsolutePath());
                cargarTabla();
            } catch (Exception e) {
                // Manejar cualquier excepción que pueda surgir durante la importación
                JOptionPane.showMessageDialog(this, "Error al importar servicios: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        
    }//GEN-LAST:event_importarTxtActionPerformed
  
    
    private void importarServiciosDesdeArchivo(String nombreArchivo) {
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("SistemaDiscapacidadPU");
        EntityManager em = emf.createEntityManager();

        int serviciosAgregados = 0; // Contador de servicios agregados

        try (BufferedReader br = new BufferedReader(new FileReader(nombreArchivo))) {
            String line;
            em.getTransaction().begin();

            while ((line = br.readLine()) != null) {
                if (line.isEmpty()) continue;

                // Dividir la línea en partes usando el separador ";"
                String[] partes = line.split(";", -1); // -1 para incluir partes vacías si hay

                // Verificar que haya exactamente 3 partes
                if (partes.length == 3) {
                    String nombreServicio = partes[0].trim(); // Nombre del servicio
                    String responsable = partes[1].trim(); // Responsable del servicio
                    String descripcion = partes[2].trim(); // Descripción del servicio

                    // Crear un nuevo servicio y persistirlo
                    Servicio servicio = new Servicio(nombreServicio, responsable, descripcion);
                    em.persist(servicio);
                    serviciosAgregados++; // Incrementar el contador
                } else {
                    // Puedes registrar los errores de formato en el log o consola
                    System.out.println("Formato incorrecto: " + line);
                }
            }

            em.getTransaction().commit();

            // Mostrar un mensaje al final indicando cuántos servicios fueron agregados
            if (serviciosAgregados > 0) {
                JOptionPane.showMessageDialog(this, serviciosAgregados + " servicio(s) agregado(s) exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "No se agregaron servicios.", "Información", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al leer el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            em.close();
            emf.close();
        }
    }
    
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BuscarAsig;
    private javax.swing.JButton btnAgregarAsig;
    private javax.swing.JButton btnBorrarAsig;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnLimpiarAsig;
    private javax.swing.JButton btnTheme;
    private javax.swing.JTextField buscarBen;
    private javax.swing.JTextField buscarSer;
    private javax.swing.JTextField buscarTxt;
    private javax.swing.JButton importarTxt;
    private javax.swing.JLabel irAtrasBen;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton reporteExel;
    private javax.swing.JButton reporteExel1;
    private javax.swing.JTable tablaAsig;
    private javax.swing.JTable tablaBenAsig;
    private javax.swing.JTable tablaServicios;
    private javax.swing.JTable tablaServiciosAsig;
    private javax.swing.JTextField txtAsigBen;
    private javax.swing.JTextField txtAsigSer;
    private javax.swing.JTextArea txtDetallesServicio;
    private javax.swing.JTextField txtResponsable;
    private javax.swing.JTextField txtServicio;
    // End of variables declaration//GEN-END:variables

    private void cargarTabla() {
        DefaultTableModel modeloTabla = new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        
        //establecemos los nombres de las columnas
        String titulos[] = {"Id", "Servicio", "Responsable", "Detalles"};
        modeloTabla.setColumnIdentifiers(titulos);
        
        //carga de datos desde la base de datos
        List <Servicio> ListarServicios = control.traerServicios();
        
        
        
        if(ListarServicios != null){
            for(Servicio ser : ListarServicios){
                Object[] objeto = {ser.getId(),ser.getNombre(), 
                    ser.getResponsable(), ser.getDescripcion()};
                
               modeloTabla.addRow(objeto);
            }
        }
        tablaServicios.setModel(modeloTabla);
        // Evitar que las columnas se reordenen
        tablaServicios.getTableHeader().setReorderingAllowed(false);

        // Evitar que las columnas se redimensionen
        tablaServicios.getTableHeader().setResizingAllowed(false);

        // Configurar el TableRowSorter para habilitar la funcionalidad de filtrar y ordenar
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(modeloTabla);
        tablaServicios.setRowSorter(sorter);
        
        ajustarAnchoColumnas(tablaServicios);
        centrarColumnas(tablaServicios, new int[]{0});
        
        // Configuración de filtrado mediante el campo de texto (buscarTxt)
        buscarTxt.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                String text = buscarTxt.getText();
                if (text.trim().length() == 0) {
                    // Si el campo está vacío, no aplicar ningún filtro
                    sorter.setRowFilter(null);
                    btnEliminar.setEnabled(true);
                } else {
                    // Aplicar el filtro (insensible a mayúsculas/minúsculas)
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                    btnEliminar.setEnabled(false); // Deshabilitar el botón eliminar mientras se filtra
                }
            }
        });
        
        // Focus listener para limpiar el filtro cuando el campo de búsqueda pierde el foco
        buscarTxt.addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                buscarTxt.setText(""); // Limpiar el campo de texto
                sorter.setRowFilter(null); // Quitar el filtro
                btnEliminar.setEnabled(true);
            }
        });
        
        
    }
    
    public void mostrarMensaje(String mensaje, String tipo, String titulo){
        JOptionPane optionPane = new JOptionPane(mensaje);
        if(tipo.equals("Info")){
            optionPane.setMessageType(JOptionPane.INFORMATION_MESSAGE);  
        } else if (tipo.equals("Error")){
            optionPane.setMessageType(JOptionPane.ERROR_MESSAGE);
        }
        
        JDialog dialog = optionPane.createDialog(titulo);
        dialog.setVisible(true);
        dialog.setAlwaysOnTop(true);
    }

    private void ajustarAnchoColumnas(JTable tabla) {
        for (int i = 0; i < tabla.getColumnModel().getColumnCount(); i++) {
        int width = 0; // Ancho inicial
        
        // Calcular el ancho necesario basado en las celdas
        for (int j = 0; j < tabla.getRowCount(); j++) {
            Object value = tabla.getValueAt(j, i);
            if (value != null) {
                width = Math.max(width, value.toString().length());
            }
        }
        // Ajustar el ancho de la columna
            tabla.getColumnModel().getColumn(i).setPreferredWidth(width * 10); // Ajustar el multiplicador según sea necesario
            tabla.getColumnModel().getColumn(0).setPreferredWidth(50);
        }
    }   
    
    private void centrarColumnas(JTable tabla, int[] columnas) {
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.CENTER);

        for (int col : columnas) {
            tabla.getColumnModel().getColumn(col).setCellRenderer(renderer);
        }
    }
    
    private void cargarTablaBeneficiario() {
        // Crear el modelo de la tabla con las columnas que no son editables
        DefaultTableModel modeloTabla = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; 
            }
        };

        // Establecer los nombres de las columnas
        String titulos[] = {"Id", "Nombre", "Discapacidad"};
        modeloTabla.setColumnIdentifiers(titulos);

        // Cargar los datos desde la base de datos o la fuente de datos
        List<Beneficiario> listarBeneficiarios = control.traerBeneficiarios();

        // Verificar si hay datos que cargar
        if (listarBeneficiarios != null) {
            for (Beneficiario ben : listarBeneficiarios) {
                // Añadir cada beneficiario al modelo de la tabla
                Object[] objeto = {ben.getId(), ben.getNombre(), ben.getDiscapacidades()};
                modeloTabla.addRow(objeto);
            }
        }

        // Asignar el modelo a la tabla
        tablaBenAsig.setModel(modeloTabla);
        // Evitar que las columnas se reordenen
        tablaBenAsig.getTableHeader().setReorderingAllowed(false);

        // Evitar que las columnas se redimensionen
        tablaBenAsig.getTableHeader().setResizingAllowed(false);

        // Configurar el TableRowSorter para habilitar la funcionalidad de filtrar y ordenar
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(modeloTabla);
        tablaBenAsig.setRowSorter(sorter);
   

        // Ajustar el ancho de las columnas de la tabla si es necesario
        ajustarAnchoColumnas(tablaBenAsig);
        centrarColumnas(tablaBenAsig, new int[]{0});
        
        // Configuración de filtrado mediante el campo de texto (buscarTxt)
        buscarBen.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                String text = buscarBen.getText();
                if (text.trim().length() == 0) {
                    // Si el campo está vacío, no aplicar ningún filtro
                    sorter.setRowFilter(null);
                    btnEliminar.setEnabled(true);
                } else {
                    // Aplicar el filtro (insensible a mayúsculas/minúsculas)
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                    btnEliminar.setEnabled(false); 
                }
            }
        });
        
        
        btnLimpiarAsig.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                tablaBenAsig.getSelectionModel().clearSelection();  // Quitar la selección de la tabla
                if (sorter != null) {
                sorter.setRowFilter(null); 
                }
            }
        });
        };
    
    
    private void cargarTablaServicios() {
        DefaultTableModel modeloTabla = new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        
        //establecemos los nombres de las columnas
        String titulos[] = {"Id", "Servicio", "Responsable"};
        modeloTabla.setColumnIdentifiers(titulos);
        
        //carga de datos desde la base de datos
        List <Servicio> ListarServicios = control.traerServicios();
        
        
        
        if(ListarServicios != null){
            for(Servicio ser : ListarServicios){
                Object[] objeto = {ser.getId(),ser.getNombre(), 
                    ser.getResponsable()};
                
               modeloTabla.addRow(objeto);
            }
        }
        tablaServiciosAsig.setModel(modeloTabla);
        // Evitar que las columnas se reordenen
        tablaServiciosAsig.getTableHeader().setReorderingAllowed(false);

        // Evitar que las columnas se redimensionen
        tablaServiciosAsig.getTableHeader().setResizingAllowed(false);

        // Configurar el TableRowSorter para habilitar la funcionalidad de filtrar y ordenar
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(modeloTabla);
        tablaServiciosAsig.setRowSorter(sorter);
        
        ajustarAnchoColumnas(tablaServiciosAsig);
        centrarColumnas(tablaServiciosAsig, new int[]{0});
        
        // Configuración de filtrado mediante el campo de texto (buscarTxt)
        buscarSer.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                String text = buscarSer.getText();
                if (text.trim().length() == 0) {
                    // Si el campo está vacío, no aplicar ningún filtro
                    sorter.setRowFilter(null);
                    btnEliminar.setEnabled(true);
                } else {
                    // Aplicar el filtro (insensible a mayúsculas/minúsculas)
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                    btnEliminar.setEnabled(false); 
                }
            }
        });
        
        btnLimpiarAsig.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                tablaServiciosAsig.getSelectionModel().clearSelection();  // Quitar la selección de la tabla
                if (sorter != null) {
                sorter.setRowFilter(null); 
                }
            }
        });
        
    }
    
    private void cargarRelacionesEnTabla() {
        DefaultTableModel modeloTabla = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false; // Evitar que las celdas sean editables
        }
        };

        // Establecemos los nombres de las columnas
        String[] titulos = {"Id", "Beneficiario","Discapacidades", "Edad", "Servicio", "Responsable"};
        modeloTabla.setColumnIdentifiers(titulos);

        List<Asignacion> listarAsignaciones = control.traerAsignaciones();

        if (listarAsignaciones != null) {
            for (Asignacion asig : listarAsignaciones) {
            // Obtener el nombre del beneficiario
            String beneficiarioNombre = asig.getBeneficiario() != null ? asig.getBeneficiario().getNombre() : "N/A";

            // Obtener la edad del beneficiario
            String edadBeneficiario = asig.getBeneficiario() != null ? String.valueOf(asig.getBeneficiario().getEdad()) : "N/A";

            // Obtener las discapacidades del beneficiario como lista
            List<String> discapacidades = asig.getBeneficiario() != null ? asig.getBeneficiario().getDiscapacidades() : new ArrayList<>();
            String beneficiarioDiscapacidades = "N/A";
            if (!discapacidades.isEmpty()) {
                beneficiarioDiscapacidades = String.join(", ", discapacidades);
            }

            // Obtener el nombre del servicio y el responsable (solo el primero)
            String servicioNombre = "N/A";
            String responsable = "N/A";
            if (asig.getServicios() != null && !asig.getServicios().isEmpty()) {
                // Obtener la primera entrada del mapa de servicios
                Map.Entry<Long, Servicio> primerServicioEntry = asig.getServicios().entrySet().iterator().next();
                Servicio primerServicio = primerServicioEntry.getValue(); // Obtener el primer servicio del mapa

                servicioNombre = primerServicio.getNombre(); // Mostrar solo el primer servicio
                responsable = primerServicio.getResponsable(); // Obtener el responsable del servicio
            }

            // Crear un objeto con los datos para la tabla
            Object[] objeto = {asig.getId(), beneficiarioNombre, beneficiarioDiscapacidades, edadBeneficiario, servicioNombre, responsable};
            modeloTabla.addRow(objeto);
        }
        }
        
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(modeloTabla);
        tablaAsig.setRowSorter(sorter);

        tablaAsig.setModel(modeloTabla);
        tablaAsig.getTableHeader().setReorderingAllowed(false);
        tablaAsig.getTableHeader().setResizingAllowed(false);

        ajustarAnchoColumnas(tablaAsig);
        centrarColumnas(tablaAsig, new int[]{0, 3, 5});
        tablaAsig.getColumnModel().getColumn(3).setPreferredWidth(50);

        // Filtrado de texto
        BuscarAsig.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                String text = BuscarAsig.getText();
                if (text.trim().length() == 0) {
                    sorter.setRowFilter(null);
                    btnBorrarAsig.setEnabled(true);
                    reporteExel.setEnabled(true);
                } else {
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                    btnBorrarAsig.setEnabled(false);
                    reporteExel.setEnabled(false);
                }
            }
        });

        // Opción de limpiar el campo manualmente
        BuscarAsig.addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                if (!BuscarAsig.getText().isEmpty()) {
                    BuscarAsig.setText(""); // Limpiar el campo de texto
                    sorter.setRowFilter(null);
                    btnBorrarAsig.setEnabled(true);
                    reporteExel.setEnabled(true);
                }
            }
        });
    
    }
}

