package vista;
import ExportarTxt.ExportarTxt;
import com.formdev.flatlaf.FlatLightLaf; 
import com.formdev.flatlaf.IntelliJTheme;
import java.awt.Color;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import logica.Beneficiario;
import logica.Controladora; 
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableRowSorter;
import logica.Asignacion;



public class MenuBeneficiarios extends javax.swing.JFrame {
    Controladora control;
    Beneficiario beneficiario;
    
    private static final Color ACCENT_COLOR_LIGHT = new Color(50, 35, 62);
    private static final Color ACCENT_COLOR_BLACK = new Color(255,216,102);
    private static final Color FOREGROUND_COLOR_LIGHT = Color.WHITE;
    private static final Color FOREGROUND_COLOR_BLACK = new Color(34,31,34);
    
    public MenuBeneficiarios() {
        initComponents();
        setResizable(false);
        try {
            control = new Controladora(); // Inicializar Controladora
            cargarTabla(); // Cargar tabla solo si Controladora se inicializa correctamente
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                "Error al inicializar la controladora: " + e.getMessage(),
                "Error de Inicialización",
                JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        nombreText = new javax.swing.JLabel();
        edadText = new javax.swing.JLabel();
        detallesText = new javax.swing.JLabel();
        disText = new javax.swing.JLabel();
        btnEditar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaBen = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDetalles = new javax.swing.JTextArea();
        txtDiscapacidad = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtEdad = new javax.swing.JTextField();
        btnElimianr = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        irAtrasBen = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnTheme = new javax.swing.JButton();
        buscarTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        reporteExel1 = new javax.swing.JButton();
        ImportarTxt = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Menú Beneficiarios");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setToolTipText("");
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        nombreText.setText("Ingrese el nombre completo:");
        nombreText.setFocusable(false);
        jPanel1.add(nombreText, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, -1, -1));

        edadText.setText("Ingrese la edad:");
        edadText.setFocusable(false);
        jPanel1.add(edadText, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 80, -1, -1));

        detallesText.setText("Ingrese detalles adicionales (opcional):");
        detallesText.setFocusable(false);
        jPanel1.add(detallesText, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 180, 340, -1));

        disText.setText("Ingrese discapacidades (separadas en comas):");
        disText.setFocusable(false);
        jPanel1.add(disText, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 80, -1, -1));

        btnEditar.setText("Editar");
        btnEditar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEditar.setFocusPainted(false);
        btnEditar.setFocusable(false);
        btnEditar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEditarMouseClicked(evt);
            }
        });
        jPanel1.add(btnEditar, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 210, 150, 40));

        jPanel2.setBackground(UIManager.getColor("Component.accentColor"));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 950, 10));

        tablaBen.setFont(new java.awt.Font("Lato", 0, 12)); // NOI18N
        tablaBen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tablaBen.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tablaBen.setFillsViewportHeight(true);
        tablaBen.setFocusable(false);
        tablaBen.setNextFocusableComponent(btnAgregar);
        tablaBen.setRequestFocusEnabled(false);
        tablaBen.setRowHeight(25);
        tablaBen.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaBen.setShowGrid(false);
        tablaBen.setShowHorizontalLines(true);
        tablaBen.setShowVerticalLines(true);
        jScrollPane2.setViewportView(tablaBen);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 360, 860, 200));

        txtDetalles.setColumns(20);
        txtDetalles.setFont(new java.awt.Font("Lato", 0, 12)); // NOI18N
        txtDetalles.setRows(5);
        txtDetalles.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtDetalles.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDetallesKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(txtDetalles);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 210, 480, 90));

        txtDiscapacidad.setFont(new java.awt.Font("Lato", 0, 12)); // NOI18N
        txtDiscapacidad.setToolTipText("");
        txtDiscapacidad.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel1.add(txtDiscapacidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 110, 360, 40));

        txtNombre.setFont(new java.awt.Font("Lato", 0, 12)); // NOI18N
        txtNombre.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel1.add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 110, 370, 40));

        txtEdad.setFont(new java.awt.Font("Lato", 0, 12)); // NOI18N
        txtEdad.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtEdad.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel1.add(txtEdad, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 110, 90, 40));

        btnElimianr.setText("Eliminar");
        btnElimianr.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnElimianr.setFocusPainted(false);
        btnElimianr.setFocusable(false);
        btnElimianr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnElimianrActionPerformed(evt);
            }
        });
        jPanel1.add(btnElimianr, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 210, 100, 40));

        btnAgregar.setBackground(UIManager.getColor("Component.accentColor"));
        btnAgregar.setForeground(UIManager.getColor("Component.foreground"));
        btnAgregar.setText("Agregar");
        btnAgregar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAgregar.setFocusPainted(false);
        btnAgregar.setFocusable(false);
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });
        jPanel1.add(btnAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 260, 360, 40));

        btnLimpiar.setText("Limpiar");
        btnLimpiar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLimpiar.setFocusPainted(false);
        btnLimpiar.setFocusable(false);
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        jPanel1.add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 210, 90, 40));

        irAtrasBen.setBackground(new java.awt.Color(255, 255, 255));
        irAtrasBen.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        irAtrasBen.setText("<< Atrás");
        irAtrasBen.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        irAtrasBen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                irAtrasBenMouseClicked(evt);
            }
        });
        jPanel1.add(irAtrasBen, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 110, 30));

        jLabel1.setBackground(UIManager.getColor("Component.accentColor"));
        jLabel1.setFont(new java.awt.Font("Bungee", 0, 15)); // NOI18N
        jLabel1.setForeground(UIManager.getColor("Component.foreground"));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("INCLUSIÓN");
        jLabel1.setOpaque(true);
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 30, 160, 20));

        jLabel2.setFont(new java.awt.Font("Bungee", 0, 15)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("ACTIVA");
        jLabel2.setOpaque(true);
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 30, 90, 20));

        btnTheme.setText("Theme");
        btnTheme.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTheme.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnThemeMousePressed(evt);
            }
        });
        jPanel1.add(btnTheme, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 70, -1, -1));
        jPanel1.add(buscarTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 320, 300, 25));

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("Buscar:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 320, 60, 25));

        reporteExel1.setText("Exportar");
        reporteExel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reporteExel1ActionPerformed(evt);
            }
        });
        jPanel1.add(reporteExel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 320, 130, -1));

        ImportarTxt.setText("Importar");
        ImportarTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportarTxtActionPerformed(evt);
            }
        });
        jPanel1.add(ImportarTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 320, 120, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        try {
            // Obtener los valores de los campos de texto
            String nombre = this.txtNombre.getText().trim();
            String detalles = this.txtDetalles.getText().trim();
            String discapacidadesTexto = this.txtDiscapacidad.getText().trim();
            

            // Verificar si los campos obligatorios están vacíos
            if (nombre.isEmpty() || discapacidadesTexto.isEmpty()) {
                 mostrarMensaje("Todos los campos deben ser completos.", "Error", "Error de Entrada");
                txtNombre.requestFocusInWindow();
                return;
            }

            // Intentar convertir la edad
            Integer edad;
            try {
                edad = Integer.valueOf(this.txtEdad.getText().trim());
            } catch (NumberFormatException e) {
                mostrarMensaje("Edad inválida. Por favor ingrese un número válido.", "Error", "Error de Entrada");
                txtEdad.requestFocusInWindow();
                return;
            }

            // Validar que la edad sea mayor que 0
            if (edad <= 0) {
                mostrarMensaje("La edad debe ser mayor que 0.", "Error", "Error de Entrada");
                txtEdad.requestFocusInWindow();
                return;
            }

            // Convertir el texto de discapacidades en una lista
            List<String> discapacidades = Arrays.asList(discapacidadesTexto.split("\\s*,\\s*"));

            // Verificar que la lista de discapacidades no esté vacía
            if (discapacidades.isEmpty()) {
                mostrarMensaje("Debe proporcionar al menos una discapacidad.", "Error", "Error de Entrada");
                txtDiscapacidad.requestFocusInWindow();
                return;
            }

            // Llamar al método del controlador para agregar el beneficiario
            control.agregar(nombre, edad, discapacidades, detalles);

            // Limpiar campos
            txtNombre.setText("");
            txtEdad.setText("");
            txtDiscapacidad.setText("");
            txtDetalles.setText("");

            // Establecer el enfoque en el primer campo
            txtNombre.requestFocusInWindow();

            // Actualizar la tabla
            cargarTabla();

        } catch (Exception e) {
            mostrarMensaje("Ocurrió un error inesperado: " + e.getMessage(), "Error", "Error");
            
        }    
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        txtNombre.setText("");
        txtDiscapacidad.setText("");
        txtDetalles.setText("");
        txtEdad.setText("");
    }//GEN-LAST:event_btnLimpiarActionPerformed
    
    private boolean enModoEdicion = false;
    
    private void btnEditarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditarMouseClicked
            if (!enModoEdicion) {
            // Obtener el índice de la fila seleccionada
            filaSeleccionada = tablaBen.getSelectedRow();

            // Verificar si hay una fila seleccionada
            if (filaSeleccionada != -1) {
                long num_Beneficiario = Long.parseLong(String.valueOf(tablaBen.getValueAt(filaSeleccionada, 0)));

                this.beneficiario = control.traerBeneficiario(num_Beneficiario);

                txtNombre.setText(beneficiario.getNombre());
                txtEdad.setText(Long.toString(beneficiario.getEdad()));
                String discapacidadesTexto = String.join(", ", beneficiario.getDiscapacidades());
                txtDiscapacidad.setText(discapacidadesTexto);
                txtDetalles.setText(beneficiario.getDetallesAdicionales());

                // Cambiar el texto del botón a "Guardar Cambios"
                btnEditar.setText("Guardar Cambios");


                // Deshabilitar los botones "Eliminar" y "Agregar"
                btnElimianr.setEnabled(false);
                btnAgregar.setEnabled(false);

                // Entrar en modo edición
                enModoEdicion = true;
            } else {
                // Mostrar un mensaje si no hay ninguna fila seleccionada
                mostrarMensaje("No se ha seleccionado ninguna fila. Por favor, seleccione una fila para editar.", "Error", "Error");

            }
        } else {
            // Si estamos en modo edición, validar y guardar los cambios
            if (filaSeleccionada != -1) {
                // Obtener los valores de los campos de texto
                String nombre = txtNombre.getText().trim();
                String discapacidadTexto = txtDiscapacidad.getText().trim();
                String detalles = txtDetalles.getText().trim();

                // Intentar convertir la edad
                Integer edad = null;
                try {
                    edad = Integer.valueOf(txtEdad.getText().trim());
                } catch (NumberFormatException e) {
                    // Mostrar un mensaje de error si la conversión falla
                    mostrarMensaje("Edad inválida. Por favor, ingrese un número válido.", "Error de Entrada", "Error");
                    return; // Salir del método para evitar acciones posteriores
                }

                // Validar que la edad sea mayor que 0
                if (edad <= 0) {
                    mostrarMensaje("La edad debe ser mayor que 0.", "Error de Entrada", "Error");
                    return; // Salir del método para evitar acciones posteriores
                }

                // Verificar si los campos obligatorios están vacíos
                if (nombre.isEmpty() || discapacidadTexto.isEmpty()) {
                    mostrarMensaje("Todos los campos deben ser llenados.", "Error de Entrada", "Error");
                    return; // Salir del método para evitar acciones posteriores
                }
                
                // Convertir el texto de discapacidades en una lista
                List<String> discapacidades = Arrays.asList(discapacidadTexto.split(","));
                
                // Limpiar espacios en blanco en cada discapacidad
                discapacidades = discapacidades.stream()
                                                .map(String::trim)
                                                .filter(d -> !d.isEmpty())
                                                .collect(Collectors.toList());
                
                control.modificarBeneficiario(beneficiario, nombre, edad, discapacidades, detalles);
                
                cargarTabla();
                
                // Mostrar un mensaje de éxito
                mostrarMensaje("Registro actualizado con éxito.", "Éxito", "Información");

                // Limpiar los campos de texto después de guardar los cambios
                txtNombre.setText("");
                txtEdad.setText("");
                txtDiscapacidad.setText("");
                txtDetalles.setText("");

                // Cambiar el texto del botón de nuevo a "Editar"
                btnEditar.setText("Editar");

                // Salir del modo edición
                enModoEdicion = false;

                // Reactivar los botones "Eliminar" y "Agregar"
                btnElimianr.setEnabled(true);
                btnAgregar.setEnabled(true);

                // Limpiar la selección de la tabla
                tablaBen.clearSelection();
            }
        }
    }//GEN-LAST:event_btnEditarMouseClicked

    
    private int filaSeleccionada = -1;
    
    private void btnElimianrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnElimianrActionPerformed
        // Obtener el índice de la fila seleccionada en la vista de la tabla
    int filaSeleccionadaVista = tablaBen.getSelectedRow();

    if (filaSeleccionadaVista != -1) {
        // Convertir el índice de la vista al índice del modelo
        int filaSeleccionadaModelo = tablaBen.convertRowIndexToModel(filaSeleccionadaVista);

        int confirmacion = JOptionPane.showConfirmDialog(this, "¿Estás seguro de que deseas eliminar este beneficiario?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

        if (confirmacion == JOptionPane.YES_OPTION) {
            try {
                // Obtener el ID del beneficiario desde el modelo de la tabla
                long num_Beneficiario = Long.parseLong(String.valueOf(tablaBen.getModel().getValueAt(filaSeleccionadaModelo, 0)));
                
                
                // Verificar si existen asignaciones antes de eliminar
                List<Asignacion> asignaciones = control.findAsignacionesPorBeneficiario(num_Beneficiario);
                if (!asignaciones.isEmpty()) {
                    mostrarMensaje("No se puede eliminar este beneficiario porque tiene asignaciones activas.", "Error", "Error");
                    return;
                }
                
                // Llamar al método para eliminar el beneficiario
                control.borrarBeneficiario(num_Beneficiario); 

                // Recargar la tabla después de la eliminación
                cargarTabla();

                mostrarMensaje("Beneficiario eliminado exitosamente.", "Info", "Éxito");
            } catch (Exception e) {
                mostrarMensaje("Ocurrió un error al eliminar el beneficiario: " + e.getMessage(), "Error", "Error");
                e.printStackTrace();
            }
        } else {
            mostrarMensaje("Eliminación cancelada.", "Info", "Cancelación");
        }
        
        // Limpiar la selección de la tabla
        tablaBen.clearSelection();
    } else {
        mostrarMensaje("No se ha seleccionado ninguna fila.", "Error", "Error");
    }
    }//GEN-LAST:event_btnElimianrActionPerformed

    private void irAtrasBenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_irAtrasBenMouseClicked

        // Crear y mostrar la nueva ventana
        Principal pantalla = new Principal();
        pantalla.setLocationRelativeTo(null);
        pantalla.setVisible(true);
        

        this.dispose();
    }//GEN-LAST:event_irAtrasBenMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        txtNombre.requestFocusInWindow();
        //cargarTabla();
    }//GEN-LAST:event_formWindowOpened

    private void txtDetallesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDetallesKeyPressed
       if (evt.getKeyCode() == KeyEvent.VK_TAB) {
            evt.consume(); // Evitar el cambio de foco
            btnAgregar.doClick();  // Simular clic en el botón
        }
    }//GEN-LAST:event_txtDetallesKeyPressed

    private void btnThemeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnThemeMousePressed
        try {
        // Verificar el Look and Feel actual y cambiar de tema
        if (UIManager.getLookAndFeel().getClass().getName().equals("com.formdev.flatlaf.FlatLightLaf")) {
            // Cambiar al tema IntelliJ
            IntelliJTheme.setup(Principal.class.getResourceAsStream("/default.theme.json"));
            UIManager.put("Component.accentColor", ACCENT_COLOR_BLACK);
            UIManager.put("Component.foreground", FOREGROUND_COLOR_BLACK);
        } else {
            // Volver a FlatLightLaf
            FlatLightLaf.setup();
            UIManager.put("Component.accentColor", ACCENT_COLOR_LIGHT);
            UIManager.put("Component.foreground", FOREGROUND_COLOR_LIGHT);
        }

        // Actualizar la UI
        SwingUtilities.updateComponentTreeUI(this);

        // Navegar a la nueva pantalla
        MenuBeneficiarios pantalla = new MenuBeneficiarios();
        pantalla.setLocationRelativeTo(null);
        pantalla.setVisible(true);
        
        // Cerrar la pantalla actual
        this.dispose();

    } catch (Exception e) {
        e.printStackTrace();
        // Aquí podrías mostrar un mensaje al usuario si ocurre un error
    }
    }//GEN-LAST:event_btnThemeMousePressed

    private void reporteExel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reporteExel1ActionPerformed
        ExportarTxt obj;

        try {
            obj = new ExportarTxt();
            obj.exportarTxt(tablaBen);  
        } catch (IOException ex) {
            System.out.println("Error: " + ex);  
        }
    }//GEN-LAST:event_reporteExel1ActionPerformed

    private void ImportarTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportarTxtActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos de texto (*.txt)", "txt"));

        int returnValue = fileChooser.showOpenDialog(this);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            try {
                importarBeneficiariosDesdeArchivo(selectedFile.getAbsolutePath());
                cargarTabla();
            } catch (Exception e) {
                // Manejar cualquier excepción que pueda surgir durante la importación
                JOptionPane.showMessageDialog(this, "Error al importar servicios: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_ImportarTxtActionPerformed


    // Método para importar beneficiarios desde un archivo
    private void importarBeneficiariosDesdeArchivo(String nombreArchivo) {
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("SistemaDiscapacidadPU");
        EntityManager em = emf.createEntityManager();

        int beneficiariosAgregados = 0; // Contador de beneficiarios agregados

        try (BufferedReader br = new BufferedReader(new FileReader(nombreArchivo))) {
            String line;
            em.getTransaction().begin();

            while ((line = br.readLine()) != null) {
                if (line.isEmpty()) continue;

                // Dividir la línea en partes usando el separador ";"
                String[] partes = line.split(";", -1); // -1 para incluir partes vacías si hay

                // Verificar que haya exactamente 4 partes
                if (partes.length == 4) {
                    String nombre = partes[0].trim(); // Nombre del beneficiario
                    int edad;
                    try {
                        edad = Integer.parseInt(partes[1].trim()); // Edad del beneficiario
                    } catch (NumberFormatException e) {
                        // Ignorar la línea si la edad es inválida y continuar
                        continue; 
                    }

                    // Extraer discapacidades y limpiar formato
                    String discapacidadesStr = partes[2].trim(); // [Discapacidad Motriz]
                    String detallesAdicionales = partes[3].trim(); // Detalles adicionales

                    // Eliminar corchetes y dividir las discapacidades
                    discapacidadesStr = discapacidadesStr.replace("[", "").replace("]", "");
                    String[] discapacidadesArray = discapacidadesStr.split(","); // Separar discapacidades por coma
                    List<String> discapacidades = Arrays.asList(discapacidadesArray);

                    // Crear un nuevo beneficiario y persistirlo
                    Beneficiario beneficiario = new Beneficiario(nombre, edad, discapacidades, detallesAdicionales);
                    em.persist(beneficiario);
                    beneficiariosAgregados++; // Incrementar el contador
                } else {
                    // Puedes registrar los errores de formato en el log o consola
                    System.out.println("Formato incorrecto: " + line);
                }
            }

            em.getTransaction().commit();

            // Mostrar un mensaje al final indicando cuántos beneficiarios fueron agregados
            if (beneficiariosAgregados > 0) {
                JOptionPane.showMessageDialog(this, beneficiariosAgregados + " beneficiario(s) agregado(s) exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "No se agregaron beneficiarios.", "Información", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al leer el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            em.close();
            emf.close();
        }
    }

    
    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ImportarTxt;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnElimianr;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnTheme;
    private javax.swing.JTextField buscarTxt;
    private javax.swing.JLabel detallesText;
    private javax.swing.JLabel disText;
    private javax.swing.JLabel edadText;
    private javax.swing.JLabel irAtrasBen;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel nombreText;
    private javax.swing.JButton reporteExel1;
    private javax.swing.JTable tablaBen;
    private javax.swing.JTextArea txtDetalles;
    private javax.swing.JTextField txtDiscapacidad;
    private javax.swing.JTextField txtEdad;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables

    private void cargarTabla() {
        try {
            // Crear el modelo de la tabla con las columnas que no son editables
            DefaultTableModel modeloTabla = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // Todas las celdas no editables
                }
            };

            // Establecer los nombres de las columnas
            String titulos[] = {"Id", "Nombre", "Edad", "Discapacidad", "Detalles"};
            modeloTabla.setColumnIdentifiers(titulos);

            // Cargar los datos desde la base de datos o la fuente de datos
            List<Beneficiario> listarBeneficiarios = control.traerBeneficiarios();

            // Verificar si hay datos que cargar
            if (listarBeneficiarios != null) {
                for (Beneficiario ben : listarBeneficiarios) {
                    // Añadir cada beneficiario al modelo de la tabla
                    Object[] objeto = {ben.getId(), ben.getNombre(), ben.getEdad(), ben.getDiscapacidades(), ben.getDetallesAdicionales()};
                    modeloTabla.addRow(objeto);
                }
            }

            // Asignar el modelo a la tabla
            tablaBen.setModel(modeloTabla);
            // Evitar que las columnas se reordenen
            tablaBen.getTableHeader().setReorderingAllowed(false);

            // Evitar que las columnas se redimensionen
            tablaBen.getTableHeader().setResizingAllowed(false);

            // Configurar el TableRowSorter para habilitar la funcionalidad de filtrar y ordenar
            TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(modeloTabla);
            tablaBen.setRowSorter(sorter);

            // Ajustar el ancho de las columnas de la tabla si es necesario
            ajustarAnchoColumnas(tablaBen);
            centrarColumnas(tablaBen, new int[]{0});
            centrarColumnas(tablaBen, new int[]{2});

            // Configuración de filtrado mediante el campo de texto (buscarTxt)
            buscarTxt.addKeyListener(new KeyAdapter() {
                @Override
                public void keyReleased(KeyEvent e) {
                    String text = buscarTxt.getText();
                    if (text.trim().length() == 0) {
                        // Si el campo está vacío, no aplicar ningún filtro
                        sorter.setRowFilter(null);
                        btnElimianr.setEnabled(true);
                    } else {
                        // Aplicar el filtro (insensible a mayúsculas/minúsculas)
                        sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                        btnElimianr.setEnabled(false); // Deshabilitar el botón eliminar mientras se filtra
                    }
                }
            });

        // Focus listener para limpiar el filtro cuando el campo de búsqueda pierde el foco
        buscarTxt.addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                buscarTxt.setText(""); // Limpiar el campo de texto
                sorter.setRowFilter(null); // Quitar el filtro
                btnElimianr.setEnabled(true);
            }
        });

    } catch (Exception e) {
        // Si hay un error al cargar los datos, se ejecutará este bloque
        JOptionPane.showMessageDialog(this, 
            "Error al cargar los datos: " + e.getMessage(), 
            "Error de Carga", 
            JOptionPane.ERROR_MESSAGE);
    }    
    }
    
    public void mostrarMensaje(String mensaje, String tipo, String titulo){
        JOptionPane optionPane = new JOptionPane(mensaje);
        if(tipo.equals("Info")){
            optionPane.setMessageType(JOptionPane.INFORMATION_MESSAGE);  
        } else if (tipo.equals("Error")){
            optionPane.setMessageType(JOptionPane.ERROR_MESSAGE);
        }
        
        JDialog dialog = optionPane.createDialog(titulo);
        dialog.setVisible(true);
        dialog.setAlwaysOnTop(true);
    }
    
    private void ajustarAnchoColumnas(JTable tabla) {
        for (int i = 0; i < tabla.getColumnModel().getColumnCount(); i++) {
        int width = 0; // Ancho inicial
        
        // Calcular el ancho necesario basado en las celdas
        for (int j = 0; j < tabla.getRowCount(); j++) {
            Object value = tabla.getValueAt(j, i);
            if (value != null) {
                width = Math.max(width, value.toString().length());
            }
        }
        // Ajustar el ancho de la columna
            tabla.getColumnModel().getColumn(i).setPreferredWidth(width * 10); // Ajustar el multiplicador según sea necesario
            tabla.getColumnModel().getColumn(0).setPreferredWidth(50);
            tabla.getColumnModel().getColumn(2).setPreferredWidth(50);
        }
    }   
    
    private void centrarColumnas(JTable tabla, int[] columnas) {
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.CENTER);

        for (int col : columnas) {
            tabla.getColumnModel().getColumn(col).setCellRenderer(renderer);
        }
    }
}
